You are an expert full-stack developer. Build a **fully functional, real “Word to PDF” Converter Tool** with **accurate layout preservation**, secure backend logic, animated modern frontend, and support across all devices. All conversion must be done using real backend libraries — no OpenAI, Gemini, cloud AI, or third-party APIs.

🎯 OBJECTIVE:
Allow users to upload `.docx` files (Microsoft Word), convert them to **accurately preserved `.pdf` files**, and provide a **secure, auto-expiring download link**. All processing must happen locally on the backend.

📦 FILE SUPPORT:
- ✅ Accept only `.docx` files (Microsoft Word)
- ✅ Max file size: **50MB**
- ❌ Reject `.doc`, `.odt`, `.txt`, `.rtf`, etc.
- ✅ Validate file extension and MIME type server-side

⚙️ BACKEND REQUIREMENTS:
Use **Python** with **Flask** for the backend. Implement real logic using open-source libraries — no dummy code.

### ✅ Use These Libraries:
- `python-docx` or `docx2pdf` (for extracting + validating content)
- `pypandoc` or `docx2pdf` (to convert `.docx` to `.pdf`)
- `uuid` for secure unique file names
- `threading` or scheduled cleanup logic to auto-delete old files
- `Flask` for file handling and secure downloads
- `os`, `time`, `hashlib` for cleanup and expiry checks

### 🛠️ Conversion Logic:
1. Validate the uploaded `.docx` file.
2. If layout is complex (tables, headers, images), preserve all:
   - Fonts
   - Headers
   - Page breaks
   - Margins
   - Images and shapes
   - Lists and nested items
3. Convert `.docx` to `.pdf` with **real layout preservation** using:
   - On Windows: `docx2pdf` (works via MS Word COM)
   - On Linux/MacOS: `pypandoc` or LibreOffice CLI
4. If conversion fails or results in empty/corrupt PDF, return a user-friendly error message.

### 🔐 SECURITY & FILE HANDLING:
- Store uploaded `.docx` and generated `.pdf` files in a temporary `/tmp/` directory.
- Generate hashed file identifiers and download tokens.
- Return a unique URL like: `/download/<uuid>` with expiry tracking.
- Files must auto-delete after **4 minutes** of generation (via thread or cleanup task).
- Ensure files are **never directly accessible** via URL guessing.

---

💡 FUNCTIONAL LOGIC FLOW:

1. User uploads a `.docx` file via drag/drop or button
2. Frontend shows animated progress bar (start → in progress → success)
3. Backend:
   - Validates file type + size
   - Generates UUID
   - Converts `.docx` to `.pdf`
   - Stores in `/tmp` with UUID-based names
   - Creates a hashed, expiring download link
4. Frontend shows animated success card with a glowing download button
5. Download link remains active for 4 minutes
6. After 4 minutes, user sees: `⚠️ Link expired. Please re-upload your file.`
7. Files are deleted automatically in background

---

💥 FRONTEND UI REQUIREMENTS:

Use **HTML + CSS + Vanilla JS** to build a beautiful, fast, modern, fully responsive UI with 3D animated elements. Do **not** use heavy frameworks.

### 🎨 Design Guidelines:
- **3D glassmorphism design** with glowing borders, semi-transparent containers, and smooth hover transitions.
- **Animated drag-and-drop zone** with SVG icon bouncing/glowing on file hover.
- Use animated progress bar with staged states (0% → 25% → 60% → 100%)
- Show loading animation (Lottie/SVG) during file upload and conversion
- Responsive layout for:
  - Mobile portrait view
  - Tablets
  - Desktop widescreen

### 🧩 User Feedback:
- ✅ Toast message for success: "Converted! Your PDF is ready to download."
- ❌ Toast error for:
   - Wrong file type
   - File too large
   - Conversion failed
   - Expired link
- Countdown timer (4:00 → 0:00) with animation under download button
- Download button becomes inactive with animation on expiry

### 📱 Accessibility:
- ARIA labels, keyboard tab support
- Button roles, skip-to-content options

---

🧪 ERROR HANDLING & VALIDATION:

Backend must return user-friendly error messages (never expose raw Python errors):

| Error Type            | Message to User                                 |
|-----------------------|--------------------------------------------------|
| File too large        | ❗ File size exceeds 50MB limit.                 |
| Invalid file type     | ⚠️ Only `.docx` files are supported.            |
| Corrupted Word file   | ❗ The Word document appears to be invalid.      |
| Blank output PDF      | ⚠️ PDF could not be generated. Try again.       |
| Conversion timeout    | ❌ Conversion took too long. Please retry.       |
| Link expired          | ⚠️ Link expired. Re-upload your file to continue.|

---

📁 PROJECT STRUCTURE:

- `/app.py` → Full Flask backend with logic
- `/templates/index.html` → Modern frontend (3D UI)
- `/static/style.css` → All custom glassmorphism styles
- `/static/main.js` → Upload logic, progress UI, download countdown
- `/tmp/` → Temporary folder (auto-create if missing)
- `/cleanup.py` or thread logic → delete old files automatically
- `requirements.txt` → All backend Python dependencies

---

📋 LOGGING (OPTIONAL):

- Log each conversion with:
   - Timestamp
   - Filename
   - IP (optional)
   - Conversion duration
   - Status (Success/Failure)
- Save securely in a `logs/` folder (rotated after size limit)

---

🧠 ADDITIONAL TIPS:

- Use `uuid.uuid4()` to create secure file names.
- For Unix-based systems, prefer LibreOffice command-line for conversion:
  ```bash
  libreoffice --headless --convert-to pdf filename.docx --outdir /tmp
