You are an expert developer. Build a fully working PDF to Word Converter Tool that does not use any AI services like OpenAI, Gemini, or third-party APIs. All processing must be done using real backend libraries, securely and efficiently, with 100% working code.

üíª GOAL
Build a full PDF to Word conversion tool with:

Real backend logic (no dummy code)

Modern animated frontend UI

Responsive design for mobile/tablet/desktop

Accurate layout preservation

OCR support for scanned PDFs (done offline, e.g., with Tesseract OCR)

Secure file handling

Auto-expiring download links (expire in 4 minutes)

üîÅ FEATURES
Accept PDF file input from users (max 50MB)

Detect whether PDF is scanned (image-based) or text-based

If scanned, extract text using Tesseract OCR (locally)

Convert PDF into .docx file

Maintain layout: paragraphs, fonts, tables, images

Generate a temporary download link that auto-expires in 4 minutes

Show animated progress during conversion

Prevent errors: blank output, corrupted files, format mismatch

üîê BACKEND DETAILS (No AI, Real Libraries)
Use libraries like:

PyMuPDF or pdfminer.six for text-based PDF extraction

pytesseract + pdf2image for scanned image-based PDF OCR

python-docx to generate real .docx files

Detect scanned vs. text PDF by checking text content density

Store uploaded files securely in a temporary /tmp/ directory

Delete both PDF and Word file automatically after 4 minutes

Securely generate hashed download URLs with time-based expiry

File validations:

.pdf only

max size 50MB

Full error handling:

Corrupted file

No text found

OCR failure

File expired

Conversion timeout

Include logging: filename, timestamp, IP address (optional)

üåê FRONTEND REQUIREMENTS (Responsive, 3D UI)
Build a beautiful, modern, 3D glassmorphic animated UI, supporting:

File upload interface (drag and drop)

Lottie or animated SVG loaders

Progress bar with real-time animation

Toast notifications for success/error

Big animated download button with countdown timer

Mobile-first responsive design

3D-style card layout with glowing hover effects

Accessible labels and keyboard support

üß© FILE FLOW LOGIC
User uploads PDF

Backend checks: is it text-based or scanned?

Extracts content (via direct text or OCR)

Converts to .docx and stores it

Generates secure download link valid for 4 mins

Frontend shows download link with timer

After expiry, backend returns: ‚ÄúLink expired‚Äù

Files auto-deleted in background or via cleanup job

‚ùå DO NOT:
Do not use OpenAI, Gemini, or any cloud AI API

Do not include dummy conversion logic

Do not return corrupted or blank .docx files

Do not skip OCR logic ‚Äî it must be done locally

Do not expose file paths or use insecure downloads

Do not slow down frontend animations on mobile

‚úÖ DO:
Use only real backend code and open-source libraries

Use CSS animations or JS frameworks for frontend

Ensure layout preservation in Word output

Make the tool run smoothly on all browsers and devices

Validate files and show user-friendly error messages

üì¶ FINAL REQUIREMENT
Return complete working backend + frontend code, with:

All dependencies (no placeholders)

requirements.txt or package.json

Environment file with all secure settings

File cleanup logic

Ready-to-deploy project (no dummy content)

Modern, mobile-friendly UI

