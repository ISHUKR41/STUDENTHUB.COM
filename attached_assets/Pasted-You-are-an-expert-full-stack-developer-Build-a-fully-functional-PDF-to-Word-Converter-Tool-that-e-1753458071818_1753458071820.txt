You are an expert full-stack developer. Build a fully functional "PDF to Word Converter Tool" that ensures perfect layout preservation, accurate formatting, and complete offline processing (no AI, no APIs). The tool must run entirely on backend logic using real open-source libraries and must not generate corrupted or poorly formatted output.

📄 GOAL:
Convert uploaded PDF files into high-quality Word (.docx) files while preserving:

- Layout and page structure
- Fonts and text styling
- Tables and paragraphs
- Images and spacing
- Multi-column layout (if applicable)

🧠 LOGIC:

1. User uploads a PDF file (max 50MB)
2. Detect if PDF is text-based or scanned
3. If text-based:
   - Use a layout-aware PDF parser like `pdf2docx` or `pdf-to-docx-converter`
   - Maintain proper text boxes, font sizes, margins, and images
4. If scanned (image-based PDF):
   - Convert PDF to images using `pdf2image`
   - Extract text from images using `pytesseract`
   - Build a `.docx` file using `python-docx` preserving paragraphs
   - Embed extracted images as reference if needed
5. Save `.docx` in `/tmp/` directory
6. Generate a secure hashed download link (UUID with expiry)
7. Provide user with download link (valid for 4 minutes)
8. Delete original PDF + .docx file after 4 minutes using background task

📦 DEPENDENCIES:
- `pdf2docx` for accurate conversion
- `pdf2image` + `pytesseract` for scanned PDFs
- `python-docx` for generating Word files manually
- `uuid`, `hashlib`, `threading` for secure links and timed deletion
- `Flask` or `FastAPI` for backend API handling
- File size validation: reject files over 50MB
- File type validation: only allow `.pdf`

🖥️ FRONTEND UI:
- Responsive modern UI (mobile + desktop)
- Glassmorphism design: blurred cards, shadows, animations
- Lottie or animated SVG for loading/progress
- Drag-and-drop upload zone with fallback
- Animated progress bar while backend converts
- Countdown timer after link is generated
- Toast popups for success/fail
- "Download Word File" button must be big, animated, glowing

⚠️ ERROR HANDLING:
- “Invalid File” → for non-PDFs
- “File Too Large” → >50MB
- “Conversion Failed” → PDF is corrupted
- “Link Expired” → after 4 minutes
- “No Text Found in PDF” → if both OCR and text parsing fail

🚫 DO NOT:
- Do not use OpenAI, Gemini, or any cloud service
- Do not use dummy or fake logic
- Do not return broken or blank Word files
- Do not skip scanned PDFs — OCR must be used locally

📁 MUST RETURN:
- Complete working backend logic
- Secure auto-deletion logic (file removed in 4 mins)
- Fully animated responsive frontend
- All working file upload/download features
- requirements.txt with all real dependencies
- Ready-to-run on Replit or any system
