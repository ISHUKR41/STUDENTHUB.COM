import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { Sparkles, Copy, Download, RefreshCw, RotateCcw, ChevronLeft, ChevronRight } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

interface Flashcard {
  id: number;
  front: string;
  back: string;
  category: string;
}

export const SmartFlashcardsTool = () => {
  const [topic, setTopic] = useState('');
  const [count, setCount] = useState('10');
  const [difficulty, setDifficulty] = useState('intermediate');
  const [flashcards, setFlashcards] = useState<Flashcard[]>([]);
  const [currentCard, setCurrentCard] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const { toast } = useToast();

  const handleGenerate = async () => {
    if (!topic.trim()) {
      toast({
        title: "Topic Required",
        description: "Please enter a topic for your flashcards",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    setProgress(0);

    const progressInterval = setInterval(() => {
      setProgress(prev => Math.min(prev + 10, 90));
    }, 200);

    try {
      const response = await fetch('/api/ai-tools/flashcards', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ topic, count: parseInt(count), difficulty })
      });

      const data = await response.json();

      if (data.success) {
        setFlashcards(data.flashcards);
        setCurrentCard(0);
        setIsFlipped(false);
        setProgress(100);
        toast({
          title: "Flashcards Generated!",
          description: `Created ${data.count} flashcards for ${data.topic}`
        });
      } else {
        throw new Error(data.error || 'Flashcard generation failed');
      }
    } catch (error) {
      console.error('Flashcard generation error:', error);
      toast({
        title: "Generation Failed",
        description: error instanceof Error ? error.message : 'Please try again',
        variant: "destructive"
      });
    } finally {
      clearInterval(progressInterval);
      setIsProcessing(false);
      setProgress(0);
    }
  };

  const nextCard = () => {
    setCurrentCard(prev => (prev + 1) % flashcards.length);
    setIsFlipped(false);
  };

  const prevCard = () => {
    setCurrentCard(prev => prev === 0 ? flashcards.length - 1 : prev - 1);
    setIsFlipped(false);
  };

  const flipCard = () => {
    setIsFlipped(!isFlipped);
  };

  const exportFlashcards = () => {
    if (flashcards.length === 0) return;

    const content = `${topic.toUpperCase()} FLASHCARDS\n${'='.repeat(30)}\n\n` +
      flashcards.map((card, index) => 
        `Card ${index + 1}:\nQ: ${card.front}\nA: ${card.back}\n${'â€”'.repeat(20)}\n`
      ).join('\n') +
      `\nGenerated by StudentHub AI Flashcards\nTopic: ${topic}\nDifficulty: ${difficulty}\nTotal Cards: ${flashcards.length}`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `flashcards_${topic.replace(/\s+/g, '_').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const copyAllCards = async () => {
    if (flashcards.length === 0) return;

    const content = flashcards.map((card, index) => 
      `${index + 1}. ${card.front}\n   Answer: ${card.back}`
    ).join('\n\n');

    try {
      await navigator.clipboard.writeText(content);
      toast({
        title: "Copied to Clipboard!",
        description: "All flashcards have been copied"
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Please copy the cards manually",
        variant: "destructive"
      });
    }
  };

  const clearAll = () => {
    setTopic('');
    setFlashcards([]);
    setCurrentCard(0);
    setIsFlipped(false);
  };

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <Sparkles className="w-12 h-12 mx-auto text-primary" />
        <h2 className="text-2xl font-bold gradient-text">Smart Flashcards</h2>
        <p className="text-muted-foreground">Generate AI-powered flashcards for effective learning</p>
      </div>

      <Card className="glass">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="w-5 h-5" />
            Generate Flashcards
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="md:col-span-1">
              <label className="text-sm font-medium mb-2 block">Topic</label>
              <Input
                placeholder="e.g., World War II, JavaScript, Biology"
                value={topic}
                onChange={(e) => setTopic(e.target.value)}
                disabled={isProcessing}
              />
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Number of Cards</label>
              <Select value={count} onValueChange={setCount} disabled={isProcessing}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="5">5 Cards</SelectItem>
                  <SelectItem value="10">10 Cards</SelectItem>
                  <SelectItem value="15">15 Cards</SelectItem>
                  <SelectItem value="20">20 Cards</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Difficulty</label>
              <Select value={difficulty} onValueChange={setDifficulty} disabled={isProcessing}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="beginner">Beginner</SelectItem>
                  <SelectItem value="intermediate">Intermediate</SelectItem>
                  <SelectItem value="advanced">Advanced</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          <div className="flex flex-wrap gap-2">
            <Button 
              onClick={handleGenerate}
              disabled={isProcessing || !topic.trim()}
              className="btn-primary"
            >
              {isProcessing ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 mr-2" />
                  Generate Flashcards
                </>
              )}
            </Button>
            
            <Button variant="outline" onClick={clearAll}>
              Clear All
            </Button>
          </div>

          {isProcessing && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Creating your flashcards...</span>
                <span>{progress}%</span>
              </div>
              <Progress value={progress} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {flashcards.length > 0 && (
        <>
          {/* Flashcard Viewer */}
          <Card className="glass">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle className="flex items-center gap-2">
                  <Sparkles className="w-5 h-5" />
                  Study Mode
                </CardTitle>
                <Badge variant="outline">
                  {currentCard + 1} of {flashcards.length}
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div 
                className="relative h-48 cursor-pointer group"
                onClick={flipCard}
              >
                <div className={`absolute inset-0 w-full h-full transition-transform duration-500 transform-style-preserve-3d ${isFlipped ? 'rotate-y-180' : ''}`}>
                  {/* Front of card */}
                  <div className="absolute inset-0 w-full h-full backface-hidden bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-lg border-2 border-dashed border-blue-200 dark:border-blue-700 flex items-center justify-center p-6">
                    <div className="text-center">
                      <h3 className="text-lg font-semibold mb-2">Question</h3>
                      <p className="text-base">{flashcards[currentCard]?.front}</p>
                      <p className="text-sm text-muted-foreground mt-4">Click to reveal answer</p>
                    </div>
                  </div>
                  
                  {/* Back of card */}
                  <div className="absolute inset-0 w-full h-full backface-hidden rotate-y-180 bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-lg border-2 border-dashed border-green-200 dark:border-green-700 flex items-center justify-center p-6">
                    <div className="text-center">
                      <h3 className="text-lg font-semibold mb-2 text-green-600">Answer</h3>
                      <p className="text-base">{flashcards[currentCard]?.back}</p>
                      <p className="text-sm text-muted-foreground mt-4">Click to see question</p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex justify-between items-center">
                <Button variant="outline" onClick={prevCard} disabled={flashcards.length <= 1}>
                  <ChevronLeft className="w-4 h-4 mr-2" />
                  Previous
                </Button>
                
                <Button variant="outline" onClick={flipCard}>
                  <RotateCcw className="w-4 h-4 mr-2" />
                  Flip Card
                </Button>
                
                <Button variant="outline" onClick={nextCard} disabled={flashcards.length <= 1}>
                  Next
                  <ChevronRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Export Options */}
          <Card className="glass">
            <CardHeader>
              <CardTitle>Export Flashcards</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2">
                <Button onClick={copyAllCards}>
                  <Copy className="w-4 h-4 mr-2" />
                  Copy All Cards
                </Button>
                
                <Button variant="outline" onClick={exportFlashcards}>
                  <Download className="w-4 h-4 mr-2" />
                  Download as TXT
                </Button>
              </div>
            </CardContent>
          </Card>
        </>
      )}
    </div>
  );
};