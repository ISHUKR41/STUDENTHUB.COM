import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { Calendar, Copy, Download, RefreshCw, BookOpen, Clock, Target } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

export const StudyPlannerTool = () => {
  const [subject, setSubject] = useState('');
  const [duration, setDuration] = useState('');
  const [difficulty, setDifficulty] = useState('intermediate');
  const [goals, setGoals] = useState('');
  const [availableTime, setAvailableTime] = useState('2 hours per day');
  const [studyPlan, setStudyPlan] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<any>(null);
  const { toast } = useToast();

  const handleGenerate = async () => {
    if (!subject.trim() || !duration.trim()) {
      toast({
        title: "Required Fields Missing",
        description: "Please enter both subject and duration",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    setProgress(0);

    const progressInterval = setInterval(() => {
      setProgress(prev => Math.min(prev + 8, 90));
    }, 300);

    try {
      const response = await fetch('/api/ai-tools/study-planner', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          subject,
          duration,
          difficulty,
          goals,
          availableTime
        })
      });

      const data = await response.json();

      if (data.success) {
        setResults(data);
        setStudyPlan(data.studyPlan);
        setProgress(100);
        toast({
          title: "Study Plan Created!",
          description: `Personalized plan generated for ${data.subject}`
        });
      } else {
        throw new Error(data.error || 'Study plan generation failed');
      }
    } catch (error) {
      console.error('Study planner error:', error);
      toast({
        title: "Generation Failed",
        description: error instanceof Error ? error.message : 'Please try again',
        variant: "destructive"
      });
    } finally {
      clearInterval(progressInterval);
      setIsProcessing(false);
      setProgress(0);
    }
  };

  const copyPlan = async () => {
    if (!studyPlan) return;

    try {
      await navigator.clipboard.writeText(studyPlan);
      toast({
        title: "Copied to Clipboard!",
        description: "Study plan has been copied"
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Please copy the plan manually",
        variant: "destructive"
      });
    }
  };

  const downloadPlan = () => {
    if (!studyPlan) return;
    
    const content = `${subject.toUpperCase()} STUDY PLAN\n${'='.repeat(40)}\n\nSubject: ${subject}\nDuration: ${duration}\nDifficulty: ${difficulty}\nGoals: ${goals || 'General mastery'}\nAvailable Time: ${availableTime}\nCreated: ${new Date().toLocaleDateString()}\n\n${'—'.repeat(40)}\n\n${studyPlan}\n\n${'—'.repeat(40)}\nGenerated by StudentHub AI Study Planner`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `study_plan_${subject.replace(/\s+/g, '_').toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const clearAll = () => {
    setSubject('');
    setDuration('');
    setGoals('');
    setStudyPlan('');
    setResults(null);
  };

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <Calendar className="w-12 h-12 mx-auto text-primary" />
        <h2 className="text-2xl font-bold gradient-text">AI Study Planner</h2>
        <p className="text-muted-foreground">Create personalized study schedules with AI guidance</p>
      </div>

      <Card className="glass">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BookOpen className="w-5 h-5" />
            Study Plan Configuration
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Subject/Topic</label>
              <Input
                placeholder="e.g., Calculus, Spanish, World History"
                value={subject}
                onChange={(e) => setSubject(e.target.value)}
                disabled={isProcessing}
              />
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Study Duration</label>
              <Select value={duration} onValueChange={setDuration} disabled={isProcessing}>
                <SelectTrigger>
                  <SelectValue placeholder="Select duration" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1 week">1 Week</SelectItem>
                  <SelectItem value="2 weeks">2 Weeks</SelectItem>
                  <SelectItem value="1 month">1 Month</SelectItem>
                  <SelectItem value="2 months">2 Months</SelectItem>
                  <SelectItem value="3 months">3 Months</SelectItem>
                  <SelectItem value="1 semester">1 Semester</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Difficulty Level</label>
              <Select value={difficulty} onValueChange={setDifficulty} disabled={isProcessing}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="beginner">Beginner</SelectItem>
                  <SelectItem value="intermediate">Intermediate</SelectItem>
                  <SelectItem value="advanced">Advanced</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Available Study Time</label>
              <Select value={availableTime} onValueChange={setAvailableTime} disabled={isProcessing}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="30 minutes per day">30 min/day</SelectItem>
                  <SelectItem value="1 hour per day">1 hour/day</SelectItem>
                  <SelectItem value="2 hours per day">2 hours/day</SelectItem>
                  <SelectItem value="3 hours per day">3 hours/day</SelectItem>
                  <SelectItem value="4+ hours per day">4+ hours/day</SelectItem>
                  <SelectItem value="Weekends only">Weekends only</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          <div>
            <label className="text-sm font-medium mb-2 block">Learning Goals (Optional)</label>
            <Textarea
              placeholder="e.g., Pass final exam, master basic concepts, prepare for certification..."
              value={goals}
              onChange={(e) => setGoals(e.target.value)}
              className="min-h-[80px] resize-none"
              disabled={isProcessing}
            />
          </div>
          
          <div className="flex flex-wrap gap-2">
            <Button 
              onClick={handleGenerate}
              disabled={isProcessing || !subject.trim() || !duration}
              className="btn-primary"
            >
              {isProcessing ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  Creating Plan...
                </>
              ) : (
                <>
                  <Calendar className="w-4 h-4 mr-2" />
                  Generate Study Plan
                </>
              )}
            </Button>
            
            <Button variant="outline" onClick={clearAll}>
              Clear All
            </Button>
          </div>

          {isProcessing && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Analyzing requirements and creating your plan...</span>
                <span>{progress}%</span>
              </div>
              <Progress value={progress} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {results && (
        <Card className="glass">
          <CardHeader>
            <div className="flex justify-between items-start">
              <CardTitle className="flex items-center gap-2">
                <Target className="w-5 h-5" />
                Your Personalized Study Plan
              </CardTitle>
              <div className="flex flex-wrap gap-2">
                <Badge variant="outline" className="flex items-center gap-1">
                  <BookOpen className="w-3 h-3" />
                  {results.subject}
                </Badge>
                <Badge variant="outline" className="flex items-center gap-1">
                  <Clock className="w-3 h-3" />
                  {results.duration}
                </Badge>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-4 rounded-lg">
              <pre className="whitespace-pre-wrap text-sm leading-relaxed font-sans">{studyPlan}</pre>
            </div>

            <div className="flex flex-wrap gap-2">
              <Button onClick={copyPlan}>
                <Copy className="w-4 h-4 mr-2" />
                Copy Plan
              </Button>
              
              <Button variant="outline" onClick={downloadPlan}>
                <Download className="w-4 h-4 mr-2" />
                Download Plan
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};