import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { Eye, Upload, Copy, Download, RefreshCw, Image, FileText } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

export const ScreenshotOCRTool = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [language, setLanguage] = useState('eng');
  const [enhance, setEnhance] = useState(true);
  const [extractedText, setExtractedText] = useState('');
  const [enhancedText, setEnhancedText] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<any>(null);
  const [preview, setPreview] = useState<string | null>(null);
  const { toast } = useToast();

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      toast({
        title: "Invalid File Type",
        description: "Please select an image file (JPG, PNG, WebP, etc.)",
        variant: "destructive"
      });
      return;
    }

    if (file.size > 10 * 1024 * 1024) {
      toast({
        title: "File Too Large",
        description: "Please select an image smaller than 10MB",
        variant: "destructive"
      });
      return;
    }

    setSelectedFile(file);
    
    // Create preview
    const reader = new FileReader();
    reader.onload = (e) => {
      setPreview(e.target?.result as string);
    };
    reader.readAsDataURL(file);
  };

  const handleExtractText = async () => {
    if (!selectedFile) {
      toast({
        title: "Image Required",
        description: "Please select an image file first",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    setProgress(0);

    const progressInterval = setInterval(() => {
      setProgress(prev => Math.min(prev + 5, 90));
    }, 500);

    try {
      const formData = new FormData();
      formData.append('image', selectedFile);
      formData.append('language', language);
      formData.append('enhance', enhance.toString());

      const response = await fetch('/api/ai-tools/screenshot-ocr', {
        method: 'POST',
        body: formData
      });

      const data = await response.json();

      if (data.success) {
        setResults(data);
        setExtractedText(data.extractedText);
        setEnhancedText(data.enhancedText || '');
        setProgress(100);
        toast({
          title: "Text Extracted!",
          description: `Found ${data.wordCount} words with ${Math.round(data.confidence)}% confidence`
        });
      } else {
        throw new Error(data.error || 'OCR extraction failed');
      }
    } catch (error) {
      console.error('OCR error:', error);
      toast({
        title: "Extraction Failed",
        description: error instanceof Error ? error.message : 'Please try again',
        variant: "destructive"
      });
    } finally {
      clearInterval(progressInterval);
      setIsProcessing(false);
      setProgress(0);
    }
  };

  const copyToClipboard = async (textToCopy: string) => {
    try {
      await navigator.clipboard.writeText(textToCopy);
      toast({
        title: "Copied to Clipboard!",
        description: "Text has been copied successfully"
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Please copy the text manually",
        variant: "destructive"
      });
    }
  };

  const downloadText = (text: string, filename: string) => {
    const content = `EXTRACTED TEXT FROM IMAGE\n${'='.repeat(35)}\n\nImage: ${selectedFile?.name}\nLanguage: ${language}\nConfidence: ${results ? Math.round(results.confidence) : 'N/A'}%\nWords Found: ${results?.wordCount || 'N/A'}\nExtracted: ${new Date().toLocaleString()}\n\n${'—'.repeat(35)}\n\n${text}\n\n${'—'.repeat(35)}\nGenerated by StudentHub OCR Tool`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const clearAll = () => {
    setSelectedFile(null);
    setPreview(null);
    setExtractedText('');
    setEnhancedText('');
    setResults(null);
    // Reset file input
    const fileInput = document.getElementById('screenshot-upload') as HTMLInputElement;
    if (fileInput) fileInput.value = '';
  };

  const languages = [
    { code: 'eng', name: 'English' },
    { code: 'spa', name: 'Spanish' },
    { code: 'fra', name: 'French' },
    { code: 'deu', name: 'German' },
    { code: 'chi_sim', name: 'Chinese (Simplified)' },
    { code: 'jpn', name: 'Japanese' },
    { code: 'kor', name: 'Korean' },
    { code: 'rus', name: 'Russian' },
    { code: 'ara', name: 'Arabic' },
  ];

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <Eye className="w-12 h-12 mx-auto text-primary" />
        <h2 className="text-2xl font-bold gradient-text">Screenshot OCR</h2>
        <p className="text-muted-foreground">Extract text from images, screenshots, and scanned documents</p>
      </div>

      <Card className="glass">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Upload className="w-5 h-5" />
            Upload Image
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="border-2 border-dashed border-border rounded-lg p-6">
            <div className="text-center space-y-4">
              <Image className="w-12 h-12 mx-auto text-muted-foreground" />
              <div>
                <p className="text-sm text-muted-foreground mb-2">
                  Drag and drop your image here, or click to browse
                </p>
                <input
                  id="screenshot-upload"
                  type="file"
                  accept="image/*"
                  onChange={handleFileSelect}
                  className="hidden"
                  disabled={isProcessing}
                />
                <Button
                  variant="outline"
                  onClick={() => document.getElementById('screenshot-upload')?.click()}
                  disabled={isProcessing}
                >
                  <Upload className="w-4 h-4 mr-2" />
                  Choose Image
                </Button>
              </div>
              <p className="text-xs text-muted-foreground">
                Supports JPG, PNG, WebP, BMP (max 10MB)
              </p>
            </div>
          </div>

          {preview && (
            <div className="space-y-2">
              <h4 className="font-medium">Preview:</h4>
              <div className="relative max-w-md mx-auto">
                <img
                  src={preview}
                  alt="Preview"
                  className="w-full h-auto max-h-64 object-contain rounded-lg border"
                />
                <Badge className="absolute top-2 right-2 bg-white/90 text-gray-800">
                  {selectedFile?.name}
                </Badge>
              </div>
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Language</label>
              <Select value={language} onValueChange={setLanguage} disabled={isProcessing}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {languages.map((lang) => (
                    <SelectItem key={lang.code} value={lang.code}>
                      {lang.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex items-center space-x-2 pt-8">
              <input
                type="checkbox"
                id="enhance-text"
                checked={enhance}
                onChange={(e) => setEnhance(e.target.checked)}
                disabled={isProcessing}
                className="rounded"
              />
              <label htmlFor="enhance-text" className="text-sm font-medium">
                AI Enhancement (fix OCR errors)
              </label>
            </div>
          </div>
          
          <div className="flex flex-wrap gap-2">
            <Button 
              onClick={handleExtractText}
              disabled={isProcessing || !selectedFile}
              className="btn-primary"
            >
              {isProcessing ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  Extracting Text...
                </>
              ) : (
                <>
                  <Eye className="w-4 h-4 mr-2" />
                  Extract Text
                </>
              )}
            </Button>
            
            <Button variant="outline" onClick={clearAll}>
              Clear All
            </Button>
          </div>

          {isProcessing && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Processing image and extracting text...</span>
                <span>{progress}%</span>
              </div>
              <Progress value={progress} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {results && (
        <Card className="glass">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="w-5 h-5" />
              Extracted Text
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/50 rounded-lg text-center">
              <div>
                <div className="text-2xl font-bold text-primary">{results.wordCount}</div>
                <div className="text-sm text-muted-foreground">Words Found</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-green-600">{Math.round(results.confidence)}%</div>
                <div className="text-sm text-muted-foreground">Confidence</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-blue-600">{results.language.toUpperCase()}</div>
                <div className="text-sm text-muted-foreground">Language</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-purple-600">{enhance && enhancedText ? 'Yes' : 'No'}</div>
                <div className="text-sm text-muted-foreground">Enhanced</div>
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <h4 className="font-semibold mb-2">Raw OCR Text:</h4>
                <div className="bg-gray-50 dark:bg-gray-800 p-3 rounded-lg max-h-40 overflow-y-auto">
                  <p className="text-sm whitespace-pre-wrap">{extractedText}</p>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => copyToClipboard(extractedText)}
                  className="mt-2"
                >
                  <Copy className="w-3 h-3 mr-1" />
                  Copy Raw Text
                </Button>
              </div>

              {enhancedText && (
                <div>
                  <h4 className="font-semibold mb-2 text-green-600">AI Enhanced Text:</h4>
                  <div className="bg-green-50 dark:bg-green-900/20 p-3 rounded-lg max-h-40 overflow-y-auto">
                    <p className="text-sm whitespace-pre-wrap">{enhancedText}</p>
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(enhancedText)}
                    className="mt-2"
                  >
                    <Copy className="w-3 h-3 mr-1" />
                    Copy Enhanced Text
                  </Button>
                </div>
              )}
            </div>

            <div className="flex flex-wrap gap-2">
              <Button onClick={() => downloadText(enhancedText || extractedText, 'extracted_text.txt')}>
                <Download className="w-4 h-4 mr-2" />
                Download Text
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};