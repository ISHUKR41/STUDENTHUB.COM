import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { FileText, Copy, Download, Zap, RefreshCw, BarChart3 } from 'lucide-react';
import { Badge } from '@/components/ui/badge';

export const TextSummarizerTool = () => {
  const [text, setText] = useState('');
  const [summary, setSummary] = useState('');
  const [length, setLength] = useState('medium');
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<any>(null);
  const { toast } = useToast();

  const handleSummarize = async () => {
    if (!text.trim()) {
      toast({
        title: "Text Required",
        description: "Please enter some text to summarize",
        variant: "destructive"
      });
      return;
    }

    if (text.split(' ').length < 50) {
      toast({
        title: "Text Too Short",
        description: "Please provide at least 50 words for effective summarization",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    setProgress(0);

    const progressInterval = setInterval(() => {
      setProgress(prev => Math.min(prev + 10, 90));
    }, 300);

    try {
      const response = await fetch('/api/ai-tools/summarize', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ text, length })
      });

      const data = await response.json();

      if (data.success) {
        setResults(data);
        setSummary(data.summary);
        setProgress(100);
        toast({
          title: "Summary Complete!",
          description: `Reduced ${data.originalWordCount} words to ${data.summaryWordCount} words (${data.compressionRatio}% compression)`
        });
      } else {
        throw new Error(data.error || 'Summarization failed');
      }
    } catch (error) {
      console.error('Summarization error:', error);
      toast({
        title: "Summarization Failed",
        description: error instanceof Error ? error.message : 'Please try again',
        variant: "destructive"
      });
    } finally {
      clearInterval(progressInterval);
      setIsProcessing(false);
      setProgress(0);
    }
  };

  const copyToClipboard = async (textToCopy: string) => {
    try {
      await navigator.clipboard.writeText(textToCopy);
      toast({
        title: "Copied to Clipboard!",
        description: "Summary has been copied successfully"
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Please copy the text manually",
        variant: "destructive"
      });
    }
  };

  const downloadSummary = () => {
    if (!summary) return;
    
    const content = `Original Text Summary\n${'='.repeat(25)}\n\nOriginal Length: ${results?.originalWordCount} words\nSummary Length: ${results?.summaryWordCount} words\nCompression: ${results?.compressionRatio}%\n\nSUMMARY:\n${summary}\n\n---\nGenerated by StudentHub AI Summarizer`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'text_summary.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const clearAll = () => {
    setText('');
    setSummary('');
    setResults(null);
  };

  const getLengthDescription = (lengthValue: string) => {
    switch (lengthValue) {
      case 'short': return '2-3 sentences';
      case 'medium': return '1-2 paragraphs';
      case 'long': return '3-4 paragraphs';
      default: return '1-2 paragraphs';
    }
  };

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <FileText className="w-12 h-12 mx-auto text-primary" />
        <h2 className="text-2xl font-bold gradient-text">Text Summarizer</h2>
        <p className="text-muted-foreground">Generate concise summaries of long texts using AI</p>
      </div>

      <Card className="glass">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="w-5 h-5" />
            Enter Your Text
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Textarea
            placeholder="Paste or type the text you want to summarize here... (minimum 50 words recommended)"
            value={text}
            onChange={(e) => setText(e.target.value)}
            className="min-h-[200px] resize-none"
            disabled={isProcessing}
          />
          
          <div className="flex items-center gap-4">
            <div className="flex-1">
              <label className="text-sm font-medium mb-2 block">Summary Length</label>
              <Select value={length} onValueChange={setLength} disabled={isProcessing}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="short">Short ({getLengthDescription('short')})</SelectItem>
                  <SelectItem value="medium">Medium ({getLengthDescription('medium')})</SelectItem>
                  <SelectItem value="long">Long ({getLengthDescription('long')})</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="text-center">
              <div className="text-sm text-muted-foreground">Word Count</div>
              <Badge variant="outline">{text.split(' ').filter(w => w).length}</Badge>
            </div>
          </div>
          
          <div className="flex flex-wrap gap-2">
            <Button 
              onClick={handleSummarize}
              disabled={isProcessing || !text.trim()}
              className="btn-primary"
            >
              {isProcessing ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  Summarizing...
                </>
              ) : (
                <>
                  <FileText className="w-4 h-4 mr-2" />
                  Summarize Text
                </>
              )}
            </Button>
            
            <Button variant="outline" onClick={clearAll}>
              Clear All
            </Button>
          </div>

          {isProcessing && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Analyzing and summarizing...</span>
                <span>{progress}%</span>
              </div>
              <Progress value={progress} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {results && (
        <Card className="glass">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart3 className="w-5 h-5" />
              Summary Results
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-3 gap-4 p-4 bg-muted/50 rounded-lg">
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">{results.originalWordCount}</div>
                <div className="text-sm text-muted-foreground">Original Words</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{results.summaryWordCount}</div>
                <div className="text-sm text-muted-foreground">Summary Words</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{results.compressionRatio}%</div>
                <div className="text-sm text-muted-foreground">Compression</div>
              </div>
            </div>

            <div>
              <h4 className="font-semibold mb-2 text-green-600">Generated Summary</h4>
              <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
                <p className="whitespace-pre-wrap leading-relaxed">{summary}</p>
              </div>
            </div>

            <div className="flex flex-wrap gap-2">
              <Button onClick={() => copyToClipboard(summary)}>
                <Copy className="w-4 h-4 mr-2" />
                Copy Summary
              </Button>
              
              <Button variant="outline" onClick={downloadSummary}>
                <Download className="w-4 h-4 mr-2" />
                Download Summary
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};