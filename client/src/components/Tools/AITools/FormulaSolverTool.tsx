import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { useToast } from '@/hooks/use-toast';
import { Calculator, Copy, Download, RefreshCw, Zap, BookOpen } from 'lucide-react';

export const FormulaSolverTool = () => {
  const [formula, setFormula] = useState('');
  const [variables, setVariables] = useState('');
  const [solution, setSolution] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<any>(null);
  const { toast } = useToast();

  const handleSolve = async () => {
    if (!formula.trim()) {
      toast({
        title: "Formula Required",
        description: "Please enter a mathematical formula or equation",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    setProgress(0);

    const progressInterval = setInterval(() => {
      setProgress(prev => Math.min(prev + 12, 90));
    }, 200);

    try {
      const response = await fetch('/api/ai-tools/solve-formula', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ formula, variables })
      });

      const data = await response.json();

      if (data.success) {
        setResults(data);
        setSolution(data.solution);
        setProgress(100);
        toast({
          title: "Formula Solved!",
          description: "Step-by-step solution generated"
        });
      } else {
        throw new Error(data.error || 'Formula solving failed');
      }
    } catch (error) {
      console.error('Formula solver error:', error);
      toast({
        title: "Solving Failed",
        description: error instanceof Error ? error.message : 'Please try again',
        variant: "destructive"
      });
    } finally {
      clearInterval(progressInterval);
      setIsProcessing(false);
      setProgress(0);
    }
  };

  const copyToClipboard = async (textToCopy: string) => {
    try {
      await navigator.clipboard.writeText(textToCopy);
      toast({
        title: "Copied to Clipboard!",
        description: "Solution has been copied successfully"
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Please copy the solution manually",
        variant: "destructive"
      });
    }
  };

  const downloadSolution = () => {
    if (!solution) return;
    
    const content = `MATHEMATICAL SOLUTION\n${'='.repeat(30)}\n\nFormula/Equation: ${formula}\n${variables ? `Variables: ${variables}\n` : ''}\nSolved: ${new Date().toLocaleString()}\n\n${'—'.repeat(30)}\n\n${solution}\n\n${'—'.repeat(30)}\nGenerated by StudentHub AI Formula Solver`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'formula_solution.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const clearAll = () => {
    setFormula('');
    setVariables('');
    setSolution('');
    setResults(null);
  };

  const exampleFormulas = [
    'x² + 5x + 6 = 0',
    '2x + 3y = 12, x - y = 1',
    'sin(x) = 0.5',
    'd/dx(x³ + 2x² - 5x + 1)',
    '∫(2x + 3)dx'
  ];

  return (
    <div className="space-y-6">
      <div className="text-center space-y-2">
        <Calculator className="w-12 h-12 mx-auto text-primary" />
        <h2 className="text-2xl font-bold gradient-text">Formula Solver</h2>
        <p className="text-muted-foreground">Solve complex mathematical equations with step-by-step explanations</p>
      </div>

      <Card className="glass">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="w-5 h-5" />
            Enter Your Formula
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <label className="text-sm font-medium mb-2 block">Mathematical Formula/Equation</label>
            <Input
              placeholder="e.g., x² + 5x + 6 = 0 or 2x + 3y = 12"
              value={formula}
              onChange={(e) => setFormula(e.target.value)}
              disabled={isProcessing}
              className="font-mono"
            />
          </div>
          
          <div>
            <label className="text-sm font-medium mb-2 block">Known Variables (Optional)</label>
            <Textarea
              placeholder="e.g., x = 2, y = unknown OR Solve for x when y = 5"
              value={variables}
              onChange={(e) => setVariables(e.target.value)}
              className="min-h-[80px] resize-none"
              disabled={isProcessing}
            />
          </div>

          <div>
            <h4 className="text-sm font-medium mb-2">Example Formulas:</h4>
            <div className="flex flex-wrap gap-2">
              {exampleFormulas.map((example, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => setFormula(example)}
                  disabled={isProcessing}
                  className="text-xs font-mono"
                >
                  {example}
                </Button>
              ))}
            </div>
          </div>
          
          <div className="flex flex-wrap gap-2">
            <Button 
              onClick={handleSolve}
              disabled={isProcessing || !formula.trim()}
              className="btn-primary"
            >
              {isProcessing ? (
                <>
                  <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  Solving...
                </>
              ) : (
                <>
                  <Calculator className="w-4 h-4 mr-2" />
                  Solve Formula
                </>
              )}
            </Button>
            
            <Button variant="outline" onClick={clearAll}>
              Clear All
            </Button>
          </div>

          {isProcessing && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Analyzing and solving your formula...</span>
                <span>{progress}%</span>
              </div>
              <Progress value={progress} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {results && (
        <Card className="glass">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BookOpen className="w-5 h-5" />
              Step-by-Step Solution
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-4 rounded-lg">
              <div className="mb-3">
                <strong>Formula:</strong> 
                <code className="ml-2 px-2 py-1 bg-white dark:bg-gray-800 rounded text-sm font-mono">
                  {results.formula}
                </code>
              </div>
              {results.variables && (
                <div className="mb-3">
                  <strong>Given:</strong> 
                  <span className="ml-2">{results.variables}</span>
                </div>
              )}
            </div>

            <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
              <h4 className="font-semibold mb-3 text-green-600">Solution:</h4>
              <pre className="whitespace-pre-wrap text-sm leading-relaxed font-sans">{solution}</pre>
            </div>

            <div className="flex flex-wrap gap-2">
              <Button onClick={() => copyToClipboard(solution)}>
                <Copy className="w-4 h-4 mr-2" />
                Copy Solution
              </Button>
              
              <Button variant="outline" onClick={downloadSolution}>
                <Download className="w-4 h-4 mr-2" />
                Download Solution
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};